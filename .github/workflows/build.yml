name: Build, Test, and Verify Python Package
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
          pip install -r requirements.txt

      - name: Run flake8
        id: flake8
        run: flake8 . --count --statistics --show-source
        continue-on-error: true

      - name: Run pylint
        id: pylint
        continue-on-error: true
        run: |
          pylint --output-format=json2:pylint.json model_training tests || true
          pylint --output-format=text model_training tests
          

      - name: Summarize pylint results
        run: |
          pylint_score=$(jq -r '.statistics.score' pylint.json)
          echo "Pylint Score: $pylint_score"
          echo "PYLINTSCORE=$pylint_score" >> $GITHUB_ENV

      - name: Error if linting fails
        if: steps.flake8.outcome == 'failure' || steps.pylint.outcome == 'failure'
        run: |
          echo "Linting failed. Please fix check the errors above."
          exit 1
          


  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Run tests with coverage
        id: coverage
        run: pytest --cov=model_training tests/ --cov-report=json:coverage.json --cov-fail-under=80
        continue-on-error: true

      - name: Calculate ML Test Score
        run: |
          COVERAGE=$(jq -r '.totals.percent_covered' coverage.json)
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE"

      - name: Error if coverage fails
        if: steps.coverage.outcome == 'failure'
        run: |
          echo "Test coverage failed. Please check the errors above."
          exit 1
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build
