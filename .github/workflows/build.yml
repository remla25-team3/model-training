name: Build, Test, and Verify Python Package
on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
          pip install -r requirements.txt

      - name: Run flake8
        id: flake8
        run: flake8 . --count --statistics --show-source
        continue-on-error: true

      - name: Run pylint
        id: pylint
        continue-on-error: true
        run: |
          pylint --output-format=text model_training tests
          pylint --output-format=json model_training tests > pylint.json
          cat pylint.json

      - name: Summarize pylint results
        run: |
          pylint_score=$(python -c "import json; with open('pylint.json') as f: data = json.load(f); print(data['score'])")
          echo "Pylint Score: $pylint_score"
          color=$(python -c "score=$pylint_score; print('brightgreen' if score > 9 else 'green' if score > 8 else 'yellowgreen' if score > 7 else 'yellow' if score > 6 else 'orange' if score > 5 else 'red')")
          echo "Pylint Color: $color"
          echo "Pylint Score: $pylint_score" >> $GITHUB_ENV
          echo "Pylint Color: $color" >> $GITHUB_ENV

      - name: Error if linting fails
        if: steps.flake8.outcome == 'failure' || steps.pylint.outcome == 'failure'
        run: |
          echo "Linting failed. Please fix check the errors above."
          exit 1
          


  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: pytest --cov=model_training tests/ --cov-report=xml

      - name: Calculate ML Test Score
        run: |
          # Calculate ML Test Score based on test coverage and other metrics
          # This is a simplified example, adjust according to your ML test criteria
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
          ML_SCORE=$(python -c "coverage=$COVERAGE; print(round(min(coverage / 10, 10), 1))")
          echo "ML_TEST_SCORE=$ML_SCORE" >> $GITHUB_ENV
          color=$(python -c "score=$ML_SCORE; print('brightgreen' if score > 9 else 'green' if score > 8 else 'yellowgreen' if score > 7 else 'yellow' if score > 6 else 'orange' if score > 5 else 'red')")
          echo "ML_COLOR=$color" >> $GITHUB_ENV
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          cov_color=$(python -c "coverage=$COVERAGE; print('brightgreen' if coverage > 90 else 'green' if coverage > 80 else 'yellowgreen' if coverage > 70 else 'yellow' if coverage > 60 else 'orange' if coverage > 50 else 'red')")
          echo "COV_COLOR=$cov_color" >> $GITHUB_ENV

          echo "ML Test Score: $ML_SCORE"
          echo "Coverage: $COVERAGE"
          echo "ML Test Score Color: $color"
          echo "Coverage Color: $cov_color"


      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build
