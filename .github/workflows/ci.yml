name: CI

on:
  push:
  pull_request:

jobs:
  test:
    name: Quality Tests and Linting
    runs-on: ubuntu-latest

    steps:
        # set up action bot    
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.TEAM_APP_ID }}
          private-key: ${{ secrets.TEAM_APP_KEY }}
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install test dependencies
        run: |
          pip install -r requirements.txt
          pip install jq
          pip install coverage-badge
          pip install anybadge

          sudo apt-get update && sudo apt-get install -y jq bc

      - name: Run flake8
        run: |
          flake8 model_training tests scripts --count --statistics --show-source || true
      
      - name: Run Bandit security linter
        run: |
          bandit -r model_training tests scripts --config bandit.yml || true

      - name: Run pylint and capture score
        run: |
          pylint model_training tests > pylint.log || true
          SCORE=$(grep 'Your code has been rated at' pylint.log | awk '{print $7}' | cut -d'/' -f1)
          echo "Pylint Score: $SCORE"
          echo "PYLINT_SCORE=$SCORE" >> $GITHUB_ENV

      - name: Fetch access key DVC and pull
        run: |
          echo '${{ secrets.SERVICE_KEY }}' > service_key.json
          dvc pull --force
          dvc repro

      - name: Run pytest with coverage
        id: pytest
        run: |
          pytest --cov=tests --cov=model_training --cov=scripts\
            --cov-report=xml --cov-report=json:coverage.json --cov-fail-under=80

      - name: Extract coverage percentage
        run: |
          if [ -f coverage.json ]; then
            COVERAGE=$(jq -r '.totals.percent_covered' coverage.json)
          else
            COVERAGE=0
          fi
          echo "Coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Calculate ML Test Score
        run: |
          python scripts/ml_test_score.py
          ML_SCORE=$(jq -r '.overall_score' metrics/ml_test_score.json)
          echo "ML Test Score: $ML_SCORE/100"
          echo "ML_SCORE=$ML_SCORE" >> $GITHUB_ENV
          echo "ML_MAX=100" >> $GITHUB_ENV
      
      - name: Generate coverage badge
        run: |
          coverage-badge -o coverage.svg -f

      - name: Generate pylint badge
        run: |
          SCORE="${{ env.PYLINT_SCORE }}"

          anybadge -l "Pylint" -v "$SCORE" -f pylint.svg 4=red 6=orange 9=green


      - name: Generate ML Test Score badge
        run: |
          SCORE="${{ env.ML_SCORE }}"
          MAX="${{ env.ML_MAX }}"

          anybadge -l "ML Test Score" -v "$SCORE" -s "/$MAX" -f ml_test_score.svg 40=red 60=orange 90=green


      - name: Commit SVG badges to badge-badges branch
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

          git fetch origin
          git worktree add ../badge-badges badge-badges || \
          git worktree add ../badge-badges -b badge-badges origin/badge-badges

          cp coverage.svg pylint.svg ml_test_score.svg ../badge-badges/

          cd ../badge-badges

          git add coverage.svg pylint.svg ml_test_score.svg
          git commit -m 'Update badge SVGs [skip ci]' || echo "No changes to commit"
          git push origin badge-badges