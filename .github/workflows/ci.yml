name: CI

on:
  push:
  pull_request:

jobs:
  # lint:
  #   name: Lint Code
  #   runs-on: ubuntu-latest

  #   steps:     
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python 3.12
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'

  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #         pip install flake8 pylint
      
  #     - name: Run flake8
  #       run: |
  #         flake8 . --count --statistics --show-source || true

  #     - name: Run pylint and capture score
  #       run: |
  #         pylint model_training tests > pylint.log || true
  #         SCORE=$(grep 'Your code has been rated at' pylint.log | awk '{print $7}' | cut -d'/' -f1)
  #         echo "Pylint Score: $SCORE"
  #         echo "PYLINT_SCORE=$SCORE" >> $GITHUB_ENV

  test:
    name: Quality Tests and Linting
    runs-on: ubuntu-latest
    # needs: lint

    steps:
        # set up action bot    
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.TEAM_APP_ID }}
          private-key: ${{ secrets.TEAM_APP_KEY }}
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install test dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8 pylint bandit
          pip install pytest pytest-cov jq
          pip install coverage-badge
          pip install anybadge

          sudo apt-get update && sudo apt-get install -y jq bc

      - name: Run flake8
        run: |
          flake8 model_training tests  --count --statistics --show-source || true

      - name: Run pylint and capture score
        run: |
          pylint model_training tests > pylint.log || true
          SCORE=$(grep 'Your code has been rated at' pylint.log | awk '{print $7}' | cut -d'/' -f1)
          echo "Pylint Score: $SCORE"
          echo "PYLINT_SCORE=$SCORE" >> $GITHUB_ENV

      - name: Fetch access key DVC and pull
        run: |
          echo '${{ secrets.SERVICE_KEY }}' > service_key.json
          dvc pull --force
          dvc repro

      - name: Run pytest with coverage
        id: pytest
        run: |
          pytest --cov= tests --cov=model_training --cov=model_training.modeling \
            --cov-report=xml --cov-report=json:coverage.json --cov-fail-under=80

      - name: Extract coverage percentage
        run: |
          if [ -f coverage.json ]; then
            COVERAGE=$(jq -r '.totals.percent_covered' coverage.json)
          else
            COVERAGE=0
          fi
          echo "Coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Calculate ML Test Score
        run: |
          # Replace with your own implementation or keep stub
          ml-test-score --config ml_test_score_config.yaml --output ml_test_score.json || \
            echo '{"score":8,"max_score":10}' > ml_test_score.json
          ML_SCORE=$(jq -r '.score' ml_test_score.json)
          ML_MAX=$(jq -r '.max_score' ml_test_score.json)
          echo "ML Test Score: $ML_SCORE/$ML_MAX"
          echo "ML_SCORE=$ML_SCORE" >> $GITHUB_ENV
          echo "ML_MAX=$ML_MAX" >> $GITHUB_ENV
      
      - name: Generate coverage badge
        run: |
          coverage-badge -o coverage.svg -f

      - name: Generate pylint badge
        run: |
          SCORE="${{ env.PYLINT_SCORE }}"

          anybadge -l "Pylint" -v "$SCORE" -f pylint.svg 5=red 7=orange 10=green


      - name: Generate ML Test Score badge
        run: |
          SCORE="${{ env.ML_SCORE }}"
          MAX="${{ env.ML_MAX }}"

          anybadge -l "Test Score" -v "$SCORE" -s "/$MAX" -f ml_test_score.svg 5=red 7=orange 10=green


      - name: Commit SVG badges to badge-badges branch
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

          git fetch origin
          git worktree add ../badge-badges badge-badges || \
          git worktree add ../badge-badges -b badge-badges origin/badge-badges

          cp coverage.svg pylint.svg ml_test_score.svg ../badge-badges/

          cd ../badge-badges

          git add coverage.svg pylint.svg ml_test_score.svg
          git commit -m 'Update badge SVGs [skip ci]' || echo "No changes to commit"
          git push origin badge-badges

  # badges:
  #   name: Generate SVG Badges
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python 3.12
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'

  #     - name: Install dependencies
  #       run: |
  #         pip install -r requirements.txt
  #         pip install coverage-badge
  #         sudo apt-get update && sudo apt-get install -y jq bc

  #     - name: Generate coverage badge
  #       run: |
  #         coverage-badge -o coverage.svg -f

  #     - name: Generate pylint badge
  #       run: |
  #         SCORE="${{ env.PYLINT_SCORE }}"
  #         COLOR="brightgreen"
  #         if (( $(echo "$SCORE < 9.0" | bc -l) )); then COLOR="yellow"; fi
  #         if (( $(echo "$SCORE < 5.0" | bc -l) )); then COLOR="red"; fi
  #         echo "<svg xmlns='http://www.w3.org/2000/svg' width='150' height='20'>
  #         <rect width='150' height='20' fill='gray'/>
  #         <rect x='70' width='80' height='20' fill='$COLOR'/>
  #         <text x='10' y='14' fill='white' font-family='Verdana' font-size='12'>Pylint</text>
  #         <text x='75' y='14' fill='white' font-family='Verdana' font-size='12'>$SCORE</text>
  #         </svg>" > pylint.svg

  #     - name: Generate ML Test Score badge
  #       run: |
  #         SCORE="${{ env.ML_SCORE }}"
  #         MAX="${{ env.ML_MAX }}"
  #         COLOR="brightgreen"
  #         if (( $(echo "$SCORE < 5.0" | bc -l) )); then COLOR="yellow"; fi
  #         if (( $(echo "$SCORE < 3.0" | bc -l) )); then COLOR="red"; fi
  #         echo "<svg xmlns='http://www.w3.org/2000/svg' width='150' height='20'>
  #         <rect width='150' height='20' fill='gray'/>
  #         <rect x='70' width='80' height='20' fill='$COLOR'/>
  #         <text x='10' y='14' fill='white' font-family='Verdana' font-size='12'>ML Test</text>
  #         <text x='75' y='14' fill='white' font-family='Verdana' font-size='12'>$SCORE/$MAX</text>
  #         </svg>" > ml_test_score.svg

  #     - name: Commit SVG badges to badge-badges branch
  #       run: |
  #         git config --global user.name 'github-actions'
  #         git config --global user.email 'github-actions@github.com'
  #         git fetch origin
  #         git worktree add ../badge-badges badge-badges || \
  #         git worktree add ../badge-badges -b badge-badges origin/badge-badges

  #         cp coverage.svg pylint.svg ml_test_score.svg ../badge-badges/

  #         cd ../badge-badges
  #         git add coverage.svg pylint.svg ml_test_score.svg
  #         git commit -m 'Update badge SVGs [skip ci]' || echo "No changes to commit"
  #         git push origin badge-badges